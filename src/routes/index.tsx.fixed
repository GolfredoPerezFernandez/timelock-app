import { component$, useSignal, $ } from '@builder.io/qwik';
import { routeLoader$, useLocation } from '@builder.io/qwik-city';
import { tursoClient } from '~/utils/turso';
import { LuUsers, LuFileText, LuBriefcase, LuDollarSign, LuAlertCircle, LuClock, LuTrendingUp } from '@qwikest/icons/lucide';
import { useAuthStatus } from './layout';

// Dashboard data loader
export const useDashboardDataLoader = routeLoader$(async (requestEvent) => {
  const db = tursoClient(requestEvent);
  
  try {
    // Create tables if they don't exist
    await db.execute({
      sql: `
        CREATE TABLE IF NOT EXISTS professionals (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER,
          name TEXT NOT NULL,
          role TEXT NOT NULL,
          description TEXT,
          resume_url TEXT,
          wallet TEXT NOT NULL,
          observations TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id)
        );
      `,
      args: []
    });

    await db.execute({
      sql: `
        CREATE TABLE IF NOT EXISTS contracts (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          professional_id INTEGER NOT NULL,
          contract_url TEXT NOT NULL,
          start_date DATE NOT NULL,
          end_date DATE,
          status TEXT NOT NULL DEFAULT 'active',
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (professional_id) REFERENCES professionals(id)
        );
      `,
      args: []
    });

    await db.execute({
      sql: `
        CREATE TABLE IF NOT EXISTS invoices (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          professional_id INTEGER NOT NULL,
          contract_id INTEGER NOT NULL,
          invoice_url TEXT NOT NULL,
          amount REAL NOT NULL,
          currency TEXT NOT NULL DEFAULT 'KNRT',
          status TEXT NOT NULL DEFAULT 'pending',
          issue_date DATE NOT NULL,
          paid_date DATE,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (professional_id) REFERENCES professionals(id),
          FOREIGN KEY (contract_id) REFERENCES contracts(id)
        );
      `,
      args: []
    });

    await db.execute({
      sql: `
        CREATE TABLE IF NOT EXISTS settlements (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          professional_id INTEGER NOT NULL,
          project_id TEXT NOT NULL,
          project_name TEXT NOT NULL,
          project_description TEXT,
          hours REAL NOT NULL,
          hourly_rate REAL NOT NULL,
          currency TEXT NOT NULL DEFAULT 'KNRT',
          total_amount REAL NOT NULL,
          total_in_knrt REAL NOT NULL,
          observations TEXT,
          status TEXT NOT NULL DEFAULT 'pending',
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          paid_date DATE,
          FOREIGN KEY (professional_id) REFERENCES professionals(id)
        );
      `,
      args: []
    });

    // Get counts and summary data
    const professionals = await db.execute({
      sql: 'SELECT COUNT(*) as count FROM professionals',
      args: []
    });
    
    const activeContracts = await db.execute({
      sql: "SELECT COUNT(*) as count FROM contracts WHERE status = 'active'",
      args: []
    });
    
    const pendingInvoices = await db.execute({
      sql: "SELECT COUNT(*) as count, SUM(amount) as total FROM invoices WHERE status = 'pending'",
      args: []
    });
    
    const upcomingPayments = await db.execute({
      sql: `
        SELECT COUNT(*) as count 
        FROM scheduled_payments 
        WHERE active = 1 AND next_payment_date <= date('now', '+7 days')
      `,
      args: []
    }).catch(() => {
      // Handle case where scheduled_payments table might not exist yet
      return { rows: [{ count: 0 }] };
    });
    
    const recentProfessionals = await db.execute({
      sql: `
        SELECT id, name, role, created_at 
        FROM professionals 
        ORDER BY created_at DESC 
        LIMIT 5
      `,
      args: []
    });
    
    const recentInvoices = await db.execute({
      sql: `
        SELECT 
          i.id, 
          i.amount, 
          i.currency, 
          i.status, 
          i.issue_date, 
          p.name as professional_name 
        FROM invoices i
        JOIN professionals p ON i.professional_id = p.id
        ORDER BY i.created_at DESC 
        LIMIT 5
      `,
      args: []
    });
    
    // Return the dashboard data
    return {
      professionals: professionals.rows[0]?.count || 0,
      activeContracts: activeContracts.rows[0]?.count || 0,
      pendingInvoices: {
        count: pendingInvoices.rows[0]?.count || 0,
        total: pendingInvoices.rows[0]?.total || 0
      },
      upcomingPayments: upcomingPayments.rows[0]?.count || 0,
      recentProfessionals: recentProfessionals.rows || [],
      recentInvoices: recentInvoices.rows || []
    };
  } catch (error) {
    console.error('Dashboard data loading error:', error);
    // Return placeholder data if there's an error
    return {
      professionals: 0,
      activeContracts: 0,
      pendingInvoices: { count: 0, total: 0 },
      upcomingPayments: 0,
      recentProfessionals: [],
      recentInvoices: []
    };
  }
});

export default component$(() => {
  const authStatus = useAuthStatus();
  const dashboardData = useDashboardDataLoader();
  const location = useLocation();
  const isPending = useSignal(false);
  const currentDate = new Date().toLocaleDateString('es-ES', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  // Mock data to supplement actual data (for visual appeal)
  const dashboardStats = {
    totalProfessionals: dashboardData.value.professionals || 24,
    activeContracts: dashboardData.value.activeContracts || 18,
    pendingInvoices: dashboardData.value.pendingInvoices?.count || 7,
    upcomingPayments: dashboardData.value.upcomingPayments || 5,
    totalSettled: "$45,240.00",
    pendingAmount: "$" + (dashboardData.value.pendingInvoices?.total || 12750).toFixed(2)
  };

  return (
    <div class="container mx-auto px-4 py-8">
      <div class="flex flex-col">
        {/* Dashboard header */}
        <header class="mb-8">
          <h1 class="text-2xl md:text-3xl font-bold mb-2">Panel de Control</h1>
          <p class="text-sm md:text-base text-gray-500 dark:text-gray-400">{currentDate}</p>
        </header>

        {/* Stats Grid */}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* Total Professionals */}
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-lg">
            <div class="flex justify-between items-center">
              <div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Total de Profesionales</p>
                <p class="text-2xl font-bold mt-1">{dashboardStats.totalProfessionals}</p>
              </div>
              <div class="w-12 h-12 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-blue-600 dark:text-blue-400">
                <LuUsers class="w-6 h-6" />
              </div>
            </div>
          </div>

          {/* Active Contracts */}
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-lg">
            <div class="flex justify-between items-center">
              <div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Contratos Activos</p>
                <p class="text-2xl font-bold mt-1">{dashboardStats.activeContracts}</p>
              </div>
              <div class="w-12 h-12 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center text-green-600 dark:text-green-400">
                <LuBriefcase class="w-6 h-6" />
              </div>
            </div>
          </div>

          {/* Pending Invoices */}
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-lg">
            <div class="flex justify-between items-center">
              <div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Facturas Pendientes</p>
                <p class="text-2xl font-bold mt-1">{dashboardStats.pendingInvoices}</p>
              </div>
              <div class="w-12 h-12 rounded-full bg-yellow-100 dark:bg-yellow-900 flex items-center justify-center text-yellow-600 dark:text-yellow-400">
                <LuFileText class="w-6 h-6" />
              </div>
            </div>
          </div>

          {/* Upcoming Payments */}
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700 transition-all hover:shadow-lg">
            <div class="flex justify-between items-center">
              <div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Pagos Pr√≥ximos</p>
                <p class="text-2xl font-bold mt-1">{dashboardStats.upcomingPayments}</p>
              </div>
              <div class="w-12 h-12 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center text-purple-600 dark:text-purple-400">
                <LuClock class="w-6 h-6" />
              </div>
            </div>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          {/* Financial overview card */}
          <div class="lg:col-span-2 bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700">
            <div class="flex justify-between items-center mb-4">
              <h2 class="text-lg font-semibold">Resumen Financiero</h2>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Liquidado</p>
                <div class="flex items-center mt-2">
                  <span class="text-2xl font-bold">{dashboardStats.totalSettled}</span>
                  <span class="text-green-500 ml-2 flex items-center text-sm">
                    <LuTrendingUp class="w-4 h-4 mr-1" /> 12.5%
                  </span>
                </div>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Importe Pendiente</p>
                <div class="flex items-center mt-2">
                  <span class="text-2xl font-bold">{dashboardStats.pendingAmount}</span>
                  <span class="text-yellow-500 ml-2 flex items-center text-sm">
                    <LuAlertCircle class="w-4 h-4 mr-1" /> Por liquidar
                  </span>
                </div>
              </div>
            </div>
            
            {/* Chart placeholder */}
            <div class="mt-6 bg-gray-100 dark:bg-gray-700 rounded-lg h-48 flex items-center justify-center">
              <p class="text-gray-500 dark:text-gray-400 text-sm font-medium">Gr√°fico de pagos mensuales</p>
            </div>
          </div>
          
          {/* Recent Professionals card */}
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700">
            <div class="flex justify-between items-center mb-4">
              <h2 class="text-lg font-semibold">Profesionales Recientes</h2>
            </div>
            <div class="space-y-4">
              {dashboardData.value.recentProfessionals.length > 0 ? (
                dashboardData.value.recentProfessionals.map((pro: any) => (
                  <div key={pro.id} class="flex items-center">
                    <div class="w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-gray-500 dark:text-gray-300">
                      {pro.name.charAt(0).toUpperCase()}
                    </div>
                    <div class="ml-3">
                      <p class="font-medium text-sm">{pro.name}</p>
                      <p class="text-xs text-gray-500 dark:text-gray-400">{pro.role}</p>
                    </div>
                  </div>
                ))
              ) : (
                <div class="text-center py-4 text-gray-500 dark:text-gray-400">
                  <p>No hay profesionales registrados</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Recent Invoices Table */}
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-100 dark:border-gray-700 overflow-hidden">
          <div class="p-6">
            <h2 class="text-lg font-semibold mb-4">Facturas Recientes</h2>
          </div>
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead>
                <tr class="text-left bg-gray-50 dark:bg-gray-700">
                  <th class="px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Profesional</th>
                  <th class="px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Fecha</th>
                  <th class="px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Importe</th>
                  <th class="px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Estado</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                {dashboardData.value.recentInvoices.length > 0 ? (
                  dashboardData.value.recentInvoices.map((invoice: any) => (
                    <tr key={invoice.id}>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">{invoice.professional_name}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">{new Date(invoice.issue_date).toLocaleDateString()}</td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm">{new Intl.NumberFormat('es-ES', {
                        style: 'currency',
                        currency: invoice.currency === 'KNRT' ? 'USD' : invoice.currency
                      }).format(invoice.amount)} {invoice.currency === 'KNRT' ? 'KNRT' : ''}</td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${
                          invoice.status === 'paid' 
                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'
                            : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'
                        }`}>
                          {invoice.status === 'paid' ? 'Pagado' : 'Pendiente'}
                        </span>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                      No hay facturas recientes
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
});
